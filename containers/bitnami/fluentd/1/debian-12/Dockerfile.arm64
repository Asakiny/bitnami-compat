# syntax=docker/dockerfile:1.4
# Copyright Broadcom, Inc. All Rights Reserved.
# SPDX-License-Identifier: APACHE-2.0

FROM docker.io/bitnami/minideb:bookworm

ARG DOWNLOADS_URL="downloads.bitnami.com/files/stacksmith"
ARG TARGETARCH

LABEL com.vmware.cp.artifact.flavor="sha256:c50c90cfd9d12b445b011e6ad529f1ad3daea45c26d20b00732fae3cd71f6a83" \
      org.opencontainers.image.base.name="docker.io/bitnami/minideb:bookworm" \
      org.opencontainers.image.created="2025-03-15T19:18:12Z" \
      org.opencontainers.image.description="Application repackaged by ZCube for arm64 compatible, originaly Bitnami" \
      org.opencontainers.image.documentation="https://github.com/bitnami/containers/tree/main/bitnami/fluentd/README.md" \
      org.opencontainers.image.ref.name="1.18.0-debian-12-r64" \
      org.opencontainers.image.source="https://github.com/ZCube/bitnami-compat" \
      org.opencontainers.image.title="fluentd" \
      org.opencontainers.image.vendor="ZCube" \
      org.opencontainers.image.version="1.18.0"

ENV HOME="/" \
    OS_ARCH="${TARGETARCH:-amd64}" \
    OS_FLAVOUR="debian-12" \
    OS_NAME="linux"

COPY prebuildfs /
SHELL ["/bin/bash", "-o", "errexit", "-o", "nounset", "-o", "pipefail", "-c"]
# Install required system packages and dependencies
RUN install_packages ca-certificates curl libcrypt1 libffi8 libjemalloc-dev libreadline-dev libssl-dev libssl3 libyaml-0-2 libyaml-dev procps sqlite3 zlib1g
RUN mkdir -p /tmp/bitnami/pkg/cache/ ; cd /tmp/bitnami/pkg/cache/ ; \
    COMPONENTS=( \
      "ruby-3.4.2-3-linux-${OS_ARCH}-debian-12" \
      "fluentd-1.18.0-5-linux-${OS_ARCH}-debian-12" \
    ) ; \
    for COMPONENT in "${COMPONENTS[@]}"; do \
      if [ ! -f "${COMPONENT}.tar.gz" ]; then \
        curl -SsLf "https://${DOWNLOADS_URL}/${COMPONENT}.tar.gz" -O ; \
        curl -SsLf "https://${DOWNLOADS_URL}/${COMPONENT}.tar.gz.sha256" -O ; \
      fi ; \
      sha256sum -c "${COMPONENT}.tar.gz.sha256" ; \
      tar -zxf "${COMPONENT}.tar.gz" -C /opt/bitnami --strip-components=2 --no-same-owner --wildcards '*/files' ; \
      rm -rf "${COMPONENT}".tar.gz{,.sha256} ; \
    done
# refer : https://github.com/docker-library/ruby/blob/master/2.7/bullseye/Dockerfile
# license : BSD-2-Clause License
# https://raw.githubusercontent.com/docker-library/ruby/master/LICENSE

RUN install_packages gnupg2 curl zlib1g

ENV RUBY_VERSION 3.4.2

ENV PATH=/usr/local/rvm/bin:$PATH

ENV LANG C.UTF-8
ENV RUBY_MAJOR 3.4
ENV RUBY_VERSION 3.4.2
# ENV RUBY_DOWNLOAD_SHA256 ca10d017f8a1b6d247556622c841fc56b90c03b1803f87198da1e4fd3ec3bf2a
# ENV RUBY_MAJOR 3.1
# ENV RUBY_VERSION 3.1.2
# ENV RUBY_DOWNLOAD_SHA256 ca10d017f8a1b6d247556622c841fc56b90c03b1803f87198da1e4fd3ec3bf2a

# some of ruby's build scripts are written in ruby
#   we purge system ruby later to make sure our final image uses what we just built
RUN set -eux; \
    \
    savedAptMark="$(apt-mark showmanual)"; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
        bison \
        dpkg-dev \
        libgdbm-dev \
        zlib1g-dev \
        build-essential \
        autoconf \
        automake \
        ruby \
        wget \
    ; \
    rm -rf /var/lib/apt/lists/*; \
    \
    wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"; \
    # echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum --check --strict; \
    \
    mkdir -p /usr/src/ruby; \
    tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1; \
    rm ruby.tar.xz; \
    \
    cd /usr/src/ruby; \
    \
# hack in "ENABLE_PATH_CHECK" disabling to suppress:
#   warning: Insecure world writable dir
    { \
        echo '#define ENABLE_PATH_CHECK 0'; \
        echo; \
        cat file.c; \
    } > file.c.new; \
    mv file.c.new file.c; \
    \
    autoconf; \
    gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; \
    ./configure \
        --build="$gnuArch" \
        --disable-install-doc \
        --enable-shared \
    ; \
    make -j "$(nproc)"; \
    make install; \
    \
    apt-mark auto '.*' > /dev/null; \
    apt-mark manual $savedAptMark > /dev/null; \
    find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';' \
        | awk '/=>/ { print $(NF-1) }' \
        | sort -u \
        | grep -vE '^/usr/local/lib/' \
        | xargs -r -n1 -I "{}" /bin/bash -c "dpkg-query --search {} || true" \
        | cut -d: -f1 \
        | sort -u \
        | xargs -r apt-mark manual \
    ; \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
    \
    cd /; \
    rm -r /usr/src/ruby; \
# verify we have no "ruby" packages installed
    if dpkg -l | grep -i ruby; then exit 1; fi; \
    [ "$(command -v ruby)" = '/usr/local/bin/ruby' ]; \
# rough smoke test
    ruby --version; \
    gem --version; \
    bundle --version; \
    apt-get clean && rm -rf /var/lib/apt/lists /var/cache/apt/archives

# don't create ".bundle" in all our apps
ENV GEM_HOME /usr/local/bundle
ENV BUNDLE_SILENCE_ROOT_WARNING=1 \
    BUNDLE_APP_CONFIG="$GEM_HOME"
ENV PATH $GEM_HOME/bin:$PATH
# adjust permissions of a few directories for running "gem install" as an arbitrary user
RUN mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"

RUN mkdir -p /opt/bitnami/ruby/bin \
    && mkdir -p /opt/bitnami/ruby/sbin \
    && mkdir -p /opt/bitnami/ruby/lib \
    && ln -s /usr/local/bin/ruby                     /opt/bitnami/ruby/bin/ \
    && ln -s /usr/local/bin/gem                      /opt/bitnami/ruby/bin/ \
    && ln -s /usr/local/bin/bundle                   /opt/bitnami/ruby/bin/


# refer : https://github.com/fluent/fluentd-docker-image/blob/master/v1.18/debian/Dockerfile
# license : Apache License 2.0
# https://raw.githubusercontent.com/fluent/fluentd-docker-image/master/LICENSE

RUN install_packages curl ca-certificates \
 && mkdir -p /opt/bitnami/fluentd/licenses \
 && curl -L -o /opt/bitnami/fluentd/licenses/LICENSE \
    https://raw.githubusercontent.com/fluent/fluentd-docker-image/master/LICENSE

# Do not split this into multiple RUN!
# Docker creates a layer for every RUN-Statement
# therefore an 'apt-get purge' has no effect

ENV GEM_HOME=/opt/bitnami/fluentd

RUN apt-get update \
 && apt-get install -y --no-install-recommends \
            ca-certificates \
 && buildDeps=" \
      make gcc g++ libc-dev \
      wget bzip2 gnupg dirmngr \
    " \
 && apt-get install -y --no-install-recommends $buildDeps \
 && echo 'gem: --no-document' >> /etc/gemrc \
 && gem install oj -v 3.10.18 \
 && gem install json -v 2.4.1 \
 && gem install async-http -v 0.54.0 \
 && gem install fluentd -v 1.18.0 \
 && gem install fluent-config-regexp-type -v 1.0.0 \
 && gem install fluent-plugin-concat -v 2.5.0 \
 && gem install fluent-plugin-parser-cri -v 0.1.1 \
 && gem install fluent-plugin-detect-exceptions -v 0.0.14 \
 && gem install fluent-plugin-elasticsearch -v 5.1.4 \
 && gem install fluent-plugin-grafana-loki -v 1.2.18 \
 && gem install fluent-plugin-kafka -v 0.17.3 \
 && gem install fluent-plugin-kubernetes_metadata_filter -v 2.9.4 \
 && gem install fluent-plugin-multi-format-parser -v 1.0.0 \
 && gem install fluent-plugin-prometheus -v 2.0.2 \
 && gem install fluent-plugin-rewrite-tag-filter -v 2.4.0 \
 && gem install fluent-plugin-s3 -v 1.6.1 \
 && gem install fluent-plugin-systemd -v 1.0.5 \
 && wget -O /tmp/jemalloc-5.3.0.tar.bz2 https://github.com/jemalloc/jemalloc/releases/download/5.3.0/jemalloc-5.3.0.tar.bz2 \
 && cd /tmp && tar -xjf jemalloc-5.3.0.tar.bz2 && cd jemalloc-5.3.0/ \
 && ./configure && make \
 && mv lib/libjemalloc.so.2 /usr/lib \
 && apt-get purge -y --auto-remove \
                  -o APT::AutoRemove::RecommendsImportant=false \
                  $buildDeps \
 && rm -rf /var/lib/apt/lists/* \
 && rm -rf /tmp/* /var/tmp/* /usr/lib/ruby/gems/*/cache/*.gem /usr/lib/ruby/gems/2.*/gems/fluentd-*/test

RUN mkdir -p /opt/bitnami/fluentd/bin \
    && mkdir -p /opt/bitnami/fluentd/sbin \
    && mkdir -p /opt/bitnami/fluentd/lib \
    && mkdir -p /etc/fluent/ \
    && ln -sf /opt/bitnami/fluentd/conf/fluentd.conf           /etc/fluent/fluentd.conf




RUN apt-get autoremove --purge -y curl && \
    apt-get update && apt-get upgrade -y && \
    apt-get clean && rm -rf /var/lib/apt/lists /var/cache/apt/archives
RUN chmod g+rwX /opt/bitnami
RUN find / -perm /6000 -type f -exec chmod a-s {} \; || true

COPY rootfs /
RUN /opt/bitnami/scripts/fluentd/postunpack.sh
ENV APP_VERSION="1.18.0" \
    BITNAMI_APP_NAME="fluentd" \
    GEM_HOME="/opt/bitnami/fluentd" \
    PATH="/opt/bitnami/ruby/bin:/opt/bitnami/fluentd/bin:$PATH"

EXPOSE 5140 24224

WORKDIR /opt/bitnami/fluentd
USER 1001
ENTRYPOINT [ "/opt/bitnami/scripts/fluentd/entrypoint.sh" ]
CMD [ "/opt/bitnami/scripts/fluentd/run.sh" ]
